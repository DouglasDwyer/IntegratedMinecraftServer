using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace IMS_Library
{
    /// <summary>
    /// This class provides methods for automatically generating Minecraft server properties files.
    /// </summary>
    public static class MinecraftConfigurationWriter
    {
        /// <summary>
        /// Given a <see cref="ServerConfiguration"/> with property data, serializes that data and writes it to a file.
        /// </summary>
        /// <param name="fileName">The relative path of the file to write.</param>
        /// <param name="configuration">The server settings to serialize.</param>
        public static void WriteServerPropertiesFile(string fileName, ServerConfiguration configuration)
        {
            string toWrite = "#IMS AUTOGENERATED\n";
            foreach (FieldInfo info in configuration.GetType().GetFields(BindingFlags.Public | BindingFlags.Instance))
            {
                ServerProperty property = info.GetCustomAttribute<ServerProperty>();
                if (property != null)
                {
                    toWrite += property.GetData(configuration, info) + "\n";
                }
            }
            File.WriteAllText(configuration.GetServerFolderLocation() + "/" + fileName, toWrite);
        }

        /// <summary>
        /// Writes the Minecraft EULA agreement to a file automatically.
        /// </summary>
        /// <param name="fileName">The relative path of the file to write to.</param>
        /// <param name="configuration">The current server settings.</param>
        public static void WriteEULA(string fileName, ServerConfiguration configuration)
        {
            File.WriteAllText(configuration.GetServerFolderLocation() + "/" + fileName, "eula=true");
        }
    }

    /// <summary>
    /// Represents a property serializable to a Minecraft server properties file.
    /// </summary>
    [AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
    public class ServerProperty : Attribute
    {
        /// <summary>
        /// The name of the property to write to the server properties file.
        /// </summary>
        protected string PropertyName;

        /// <summary>
        /// Marks a field as representing a property in a <c>server.properties</c> file.
        /// </summary>
        /// <param name="propertyName">The name of the property to write to the server configuration file.</param>
        public ServerProperty(string propertyName)
        {
            PropertyName = propertyName;
        }

        /// <summary>
        /// Retrieves a string representing the serialized data of a field to be written to the server properties file.
        /// </summary>
        /// <param name="configuration">The server configuration object containing the data to serialize.</param>
        /// <param name="field">The field of <paramref name="configuration"/> that this attribute is bound to.</param>
        /// <returns>A string with the serialized field data.</returns>
        public virtual string GetData(ServerConfiguration configuration, FieldInfo field)
        {
            if(field.FieldType == typeof(string) || field.FieldType == typeof(int) || field.FieldType == typeof(double))
            {
                return PropertyName + "=" + field.GetValue(configuration);
            }
            else if(field.FieldType == typeof(bool))
            {
                if((bool)field.GetValue(configuration))
                {
                    return PropertyName + "=true";
                }
                else
                {
                    return PropertyName + "=false";
                }
            }
            else if(field.FieldType == typeof(WebPort))
            {
                return PropertyName + "=" + ((WebPort)field.GetValue(configuration)).Port;
            }
            else if(field.FieldType == typeof(Dictionary<string,string>))
            {
                string toReturn = "";
                foreach(KeyValuePair<string, string> pair in (Dictionary<string,string>)field.GetValue(configuration))
                {
                    toReturn += pair.Key + "=" + pair.Value + "\n";
                }
                return toReturn;
            }
            else
            {
                throw new NotImplementedException("Cannot write type " + field.FieldType + " into the server.properties file.");
            }
        }
    }
}
