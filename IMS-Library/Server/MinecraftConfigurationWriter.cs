using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace IMS_Library
{
    public static class MinecraftConfigurationWriter
    {
        public static void WriteServerPropertiesFile(string fileName, ServerConfiguration configuration)
        {
            string toWrite = "#IMS AUTOGENERATED\n";
            foreach (FieldInfo info in configuration.GetType().GetFields(BindingFlags.Public | BindingFlags.Instance))
            {
                ServerProperty property = info.GetCustomAttribute<ServerProperty>();
                if (property != null)
                {
                    toWrite += property.GetData(configuration, info) + "\n";
                }
            }
            File.WriteAllText(configuration.GetServerFolderLocation() + "/" + fileName, toWrite);
        }

        public static void WriteEULA(string fileName, ServerConfiguration configuration)
        {
            File.WriteAllText(configuration.GetServerFolderLocation() + "/" + fileName, "eula=true");
        }
    }

    [AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)]
    public class ServerProperty : Attribute
    {
        public string PropertyName;

        public ServerProperty(string propertyName)
        {
            PropertyName = propertyName;
        }

        public virtual string GetData(ServerConfiguration configuration, FieldInfo field)
        {
            if(field.FieldType == typeof(string) || field.FieldType == typeof(int))
            {
                return PropertyName + "=" + field.GetValue(configuration);
            }
            else if(field.FieldType == typeof(bool))
            {
                if((bool)field.GetValue(configuration))
                {
                    return PropertyName + "=true";
                }
                else
                {
                    return PropertyName + "=false";
                }
            }
            else if(field.FieldType == typeof(WebPort))
            {
                return PropertyName + "=" + ((WebPort)field.GetValue(configuration)).Port;
            }
            else
            {
                throw new NotImplementedException("Cannot write type " + field.FieldType + " into the server.properties file.");
            }
        }
    }
}
