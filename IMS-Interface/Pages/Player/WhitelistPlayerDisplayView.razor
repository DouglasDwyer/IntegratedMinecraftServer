@using IMS_Library

@inherits PlayerDisplayView

<style>
    .playertable > thead > tr > th {
        vertical-align: middle;
    }

    .playertable > tbody > tr > th {
        vertical-align: middle;
    }

    .playertable > tbody > tr > td {
        vertical-align: middle;
    }

    .playerheadicon {
        width: 28px;
        height: 28px;
        background-size: 100%;
        image-rendering: pixelated;
    }

    .linkbutton {
        background: none !important;
        border: none;
        padding: 0 !important;
        color: #23527c;
    }
</style>
<div style="margin:5px; float:right">
    <MultiToggle @ref="WhitelistOnOffToggle" Options="WhitelistOnOffOptions" SelectedIndex="CurrentServer.WhitelistEnabled ? 0 : 1" OnSelectionChange="ToggleWhitelist"></MultiToggle>
</div>
<div style="margin:5px">
    <label>Add user to whitelist</label>
    <br />
    <input class="form-control" style="width:200px; display:inline-block" placeholder="Username" onkeyup="if (event.keyCode === 13) { document.getElementById('AddPlayerButton').click(); }" @bind="CurrentAddUserText" />
    <button id="AddPlayerButton" class="btn btn-primary" @onclick="AddUserToWhitelistButtonClick">Add</button>
</div>
<hr />
@{
    IEnumerable<MinecraftPlayer> players = IMS.AsThreadSafe(() => CurrentServer.GetAllWhitelistedPlayers());
    if (players.Count() == 0)
    {
        <label style="padding-top:3px; font-weight:normal"><i>There are currently no whitelisted players.</i></label>
        return;
    }
}
<table class="playertable table table-striped">
    @{
        bool renderIPs = CurrentServer.SupportsIPs;
        bool renderBans = CurrentServer.SupportsBanning;
        bool renderBanIPs = CurrentServer.SupportsBanningIPs;
        bool renderOps = CurrentServer.SupportsOps;
        bool renderKicking = CurrentServer.SupportsKicking;
        bool renderWhitelist = CurrentServer.SupportsWhitelist;
    }
    <thead>
        <tr>
            <th style="width:32px">
            </th>
            <th>
                Name
            </th>
            <th>
                UUID
            </th>
            @if (renderIPs)
            {
                <th>
                    IP
                </th>
            }
            <th>
                Last seen
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<MinecraftPlayer> onlinePlayers = IMS.AsThreadSafe(() => CurrentServer.GetOnlinePlayers());
            List<BanInformation> banPlayers = IMS.AsThreadSafe(() => CurrentServer.GetAllBans());
            List<BanIPTag> banIPs = IMS.AsThreadSafe(() => CurrentServer.GetAllBannedIPs());
        }
        @foreach (MinecraftPlayer player in players)
        {
            <tr>
                <td style="width:32px">
                    <div class="playerheadicon" style="background-image:url(@("https://crafatar.com/avatars/" + player.UUID + "?overlay"))">
                    </div>
                </td>
                <th>
                    @player.Username
                </th>
                <td>
                    @player.UUID
                </td>
                @if (renderIPs)
                {
                    <td>
                        @player.IP
                    </td>
                }
                <td>
                    @if (onlinePlayers.Contains(player))
                    {
                        @("Online for " + GetHoursAndMinutesOfTimespan(DateTime.Now - player.LastConnectionEvent))
                    }
                    else
                    {
                        if (player.LastConnectionEvent == default(DateTime))
                        {
                            @("Never")
                        }
                        else
                        {
                            @player.LastConnectionEvent
                        }
                    }
                </td>
                <td style="text-align:right">
                    <div style="display:inline">
                        <button class="linkbutton" @onclick="x => UnwhitelistPlayer(player.Username)">Unwhitelist</button>
                        @if (renderOps)
                        {
                            @("|")
                            @if (player.PermissionLevel > 0)
                            {
                                <button class="linkbutton" @onclick="x => DeopPlayer(player.Username)">Deop</button>
                            }
                            else
                            {
                                <button class="linkbutton" @onclick="x => OpPlayer(player.Username)">Op</button>
                            }
                        }
                        @if (renderKicking && onlinePlayers.Contains(player))
                        {
                            @("|")
                            <button class="linkbutton" @onclick="x => KickPlayer(player.Username)">Kick</button>
                        }
                        @if (renderBans)
                        {
                            @("|")
                            if (banPlayers.FindIndex(x => x.Player == player) < 0)
                            {
                                <button class="linkbutton" @onclick="x => BanPlayer(player.Username)">Ban</button>
                            }
                            else
                            {
                                <button class="linkbutton" @onclick="x => UnbanPlayer(player.Username)">Unban</button>
                            }
                        }
                        @if (renderBanIPs && !string.IsNullOrEmpty(player.IP))
                        {
                            @("|")
                            if (banIPs.FindIndex(x => x.ip == player.IP) < 0)
                            {
                                <button class="linkbutton" @onclick="x => BanIP(player.IP)">Ban IP</button>
                            }
                            else
                            {
                                <button class="linkbutton" @onclick="x => UnbanIP(player.IP)">Unban IP</button>
                            }
                        }
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    protected string[] WhitelistOnOffOptions = new[] { "Whitelist on", "Whitelist off" };

    protected string CurrentAddUserText { get; set; }

    protected MultiToggle WhitelistOnOffToggle;

    protected void ToggleWhitelist(int onOrOff)
    {
        IMS.AsThreadSafe(() => CurrentServer.WhitelistEnabled = onOrOff == 0);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(WhitelistOnOffToggle != null && WhitelistOnOffToggle.SelectedIndex != (CurrentServer.WhitelistEnabled ? 0 : 1))
        {
            WhitelistOnOffToggle.SelectedIndex = CurrentServer.WhitelistEnabled ? 0 : 1;
        }
    }

    protected string GetHoursAndMinutesOfTimespan(TimeSpan span)
    {
        string toReturn = "";
        toReturn += span.Minutes == 1 ? "1 minute" : span.Minutes + " minutes";
        if (span.TotalHours > 1)
        {
            if (Math.Round(span.TotalHours) == 1)
            {
                toReturn = "1 hour " + toReturn;
            }
            else
            {
                toReturn = Math.Round(span.TotalHours) + " hours " + toReturn;
            }
        }
        return toReturn;
    }

    protected void BanPlayer(string name)
    {
        IMS.AsThreadSafe(() => CurrentServer.BanPlayer(name, ""));
    }

    protected void AddUserToWhitelistButtonClick()
    {
        IMS.AsThreadSafe(() => CurrentServer.WhitelistPlayer(CurrentAddUserText));
        CurrentAddUserText = "";
    }

    protected void UnbanPlayer(string name)
    {
        IMS.AsThreadSafe(() => CurrentServer.UnbanPlayer(name));
    }

    protected void BanIP(string ip)
    {
        IMS.AsThreadSafe(() => CurrentServer.BanIP(ip, ""));
    }

    protected void UnbanIP(string ip)
    {
        IMS.AsThreadSafe(() => CurrentServer.UnbanIP(ip));
    }

    protected void WhitelistPlayer(string name)
    {
        IMS.AsThreadSafe(() => CurrentServer.WhitelistPlayer(name));
    }

    protected void UnwhitelistPlayer(string name)
    {
        IMS.AsThreadSafe(() => CurrentServer.RemoveWhitelistPlayer(name));
    }

    protected void OpPlayer(string name)
    {
        IMS.AsThreadSafe(() => CurrentServer.OpPlayer(name));
    }

    protected void DeopPlayer(string name)
    {
        IMS.AsThreadSafe(() => CurrentServer.DeopPlayer(name));
    }

    protected void KickPlayer(string name)
    {
        IMS.AsThreadSafe(() => CurrentServer.KickPlayer(name, ""));
    }
}
