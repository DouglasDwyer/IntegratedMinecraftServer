@namespace IMS_Interface.World

@using IMS_Library
@using Blazor.FileReader
@using System.IO

@inject PopupProvider PopupManager
@inject IFileReaderService FileUploader

<style>
    label {
        font-weight: normal;
    }
</style>
<label><b>Change server icon?</b></label>
<br />
<label>
    @if (DisplayData.CurrentServer.State != ServerProxy.ServerState.Disabled)
    {
        @("The server icon should be a 64x64 pixel image.  The server will restart so that changes may take effect.")
    }
    else
    {
        @("The server icon should be a 64x64 pixel image.")
    }
</label>
<br />
<br />
<label></label>
<div style="position:absolute;right:10px;bottom:10px;">
    <label class="btn btn-primary" style="padding:5px">
        Upload icon
        <input class="btn btn-primary" style="display:none" type="file" @ref="WorldIconUpload" @onchange="UploadIcon" accept=".png" disabled="@IsUploading" />
    </label>
    <button class="btn btn-danger" @onclick="DeleteIcon" disabled="@IsUploading">Clear icon</button>
    <button class="btn btn-default" @onclick="x => PopupManager.ClosePopup()" disabled="@IsUploading">Cancel</button>
</div>

@code {
    [Parameter]
    public ChangeServerIconDisplay DisplayData { get; set; }

    protected ElementReference WorldIconUpload { get; set; }
    protected bool IsUploading = false;

    protected void DeleteIcon()
    {
        IsUploading = true;
        File.Delete(DisplayData.CurrentServer.ServerIconLocation);
        PopupManager.ClosePopup();
        DisplayData.OnDeleteOccur?.Invoke();
    }

    protected async Task UploadIcon()
    {
        IsUploading = true;
        string destinationFile = DisplayData.CurrentServer.ServerIconLocation;

        File.Delete(destinationFile);
        using (Stream uploadStream = await (await FileUploader.CreateReference(WorldIconUpload).EnumerateFilesAsync()).Single().CreateMemoryStreamAsync(1024 * 1024))
        using (Stream fileStream = File.Create(destinationFile))
        {
            await uploadStream.CopyToAsync(fileStream);
        }
        PopupManager.ClosePopup();
        DisplayData.OnDeleteOccur?.Invoke();
        if(DisplayData.CurrentServer.State != ServerProxy.ServerState.Disabled)
        {
            DisplayData.CurrentServer.RestartAsync();
        }
    }

    public class ChangeServerIconDisplay : PopupDisplay<ChangeServerIconDisplayView>
    {
        public JavaServer CurrentServer;
        public Action OnDeleteOccur;

        public ChangeServerIconDisplay(JavaServer server, Action delete)
        {
            CurrentServer = server;
            OnDeleteOccur = delete;
        }
    }
}
