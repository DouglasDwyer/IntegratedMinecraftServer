@using  IMS_Library

@page "/ServerConsole"
@layout MainLayout

@inject IJSRuntime JSRuntime

<br />
<br />
    <div style="display:table; width:80%;resize:none; height:70%; min-height:70%; max-height:70%; max-width:80%; min-width:80%; margin:0 auto">
        <textarea id="ConsoleOutputBox" readonly rows="25" class="form-control" style="
        width: 100%;
        display: table-cell;
        resize: none;
        height: 100%;
        min-height: 100%;
        max-height: 100%;
        max-width: 100%;
        min-width: 100%;
        font-family: TimesNewRoman,Times New Roman,Times,Baskerville,Georgia,serif;" value="@ConsoleText"></textarea>
        <input placeholder="Enter console command..." class="form-control" style="margin-top:4px; display:table-cell; margin-left:0px; margin-right:6px; max-width:calc(100% - 44px)" onkeyup="if (event.keyCode === 13) { document.getElementById('SendCommandButton').click(); }" @bind="CommandText" />
        <button class="btn btn-primary" id="SendCommandButton" style="margin-right:0" @onclick="SendCommand">▶</button>
    </div>

<Timer UpdateScope=this Interval=250 @ref="LoadTimer" Tick="UpdateText" UseSynchronousTick=false UpdateComponentOnTick=false></Timer>

@code {
    [CascadingParameter(Name = "CurrentServer")]
    public Guid CurrentServer { get; set; }

    public Timer LoadTimer { get; set; }

    public string CommandText { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("scrollToBottom", "ConsoleOutputBox");
        }
        LoadTimer.Enabled = true;
    }

    protected void UpdateText()
    {
        JSRuntime.InvokeVoidAsync("serverConsoleSetText", "ConsoleOutputBox", ConsoleText);
    }

    protected void SendCommand()
    {
        IMS.AsThreadSafe(() =>
        {
            IMS.Instance.ServerManager.GetServer(CurrentServer).SendConsoleCommand(CommandText);
        });
        CommandText = "";
    }

    public string ConsoleText
    {
        get
        {
            return IMS.AsThreadSafe(() => IMS.Instance.ServerManager.GetServer(CurrentServer).GetConsoleText());
        }
    }
}
