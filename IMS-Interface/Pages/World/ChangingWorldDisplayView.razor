@using IMS_Library
@using Blazor.FileReader
@using System.IO

@inject PopupProvider PopupManager

<style>
    label {
        font-weight: normal;
    }
</style>
<label><b>Setting @DisplayData.CurrentWorld.Name as active world on @DisplayData.CurrentServer.CurrentConfiguration.ServerName</b></label>
<div class="progress progress-striped active" style="margin-bottom:0px">
    <div class="progress-bar" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%">
    </div>
</div>

@code {

    [Parameter]
    public ChangingWorldDisplay DisplayData { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await Task.Run(() => {
                IMS.AsThreadSafe(() => {
                    if (DisplayData.CurrentServer.State == ServerProxy.ServerState.Disabled)
                    {
                        DisplayData.CurrentServer.CurrentConfiguration.WorldID = DisplayData.CurrentWorld.ID;
                    }
                    else
                    {
                        DisplayData.CurrentServer.Stop();
                        DisplayData.CurrentServer.CurrentConfiguration.WorldID = DisplayData.CurrentWorld.ID;
                        DisplayData.CurrentServer.Start();
                    }
                });
            });
            PopupManager.ClosePopup();
            DisplayData.OnChangeFinish?.Invoke();
        }
    }

    public class ChangingWorldDisplay : PopupDisplay<ChangingWorldDisplayView>
    {
        public World CurrentWorld;
        public ServerProxy CurrentServer;
        public Action OnChangeFinish;

        public ChangingWorldDisplay(World world, ServerProxy server, Action finish)
        {
            CurrentWorld = world;
            CurrentServer = server;
            OnChangeFinish = finish;
        }
    }
}
