@namespace IMS_Interface

@using IMS_Library
@using System.Text
@using Microsoft.AspNetCore.Http

@inject PopupProvider PopupManager
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor Context

<style>
    label {
        font-weight: normal;
    }
</style>
<label><b>Change username/password</b></label>
<br />
<label>These are the credentials that you use to log into IMS.</label>
<br />
<br />
<label>Username</label>
<br />
<input class="form-control" style="width:200px;" type="text" placeholder="Username..." @bind="CurrentUsernameValue" />
<br />
<label>Password</label>
<br />
<input class="form-control" style="width:200px;" type="password" placeholder="Keep current password" @bind="CurrentPasswordValue" />

<br />
<br />
<label></label>
<div style="position:absolute;right:10px;bottom:10px;">
    <button class="btn btn-primary" @onclick="x => UpdateUsernamePasswordAndClose()">Change</button>
    <button class="btn btn-warning" @onclick="x => DisableLoginAndClose()">Don't require login</button>
    <button class="btn btn-default" @onclick="x => PopupManager.ClosePopup()">Cancel</button>
</div>

@code {
    [Parameter]
    public ChangeUsernameAndPasswordDisplay DisplayData { get; set; }

    protected string CurrentUsernameValue { get; set; }
    protected string CurrentPasswordValue { get; set; }

    protected override void OnInitialized()
    {
        CurrentUsernameValue = IMS.Instance.CurrentSettings.Username;
        CurrentPasswordValue = IMS.Instance.CurrentSettings.PasswordHash is null ? "" : null;
    }

    protected void DisableLoginAndClose()
    {
        IMSSettings settings = IMS.Instance.CurrentSettings.Clone() as IMSSettings;
        settings.Username = null;
        settings.PasswordHash = null;
        IMS.Instance.ChangeSettings(settings);
        Login.DeleteLoginCookie(JSRuntime);
        PopupManager.ClosePopup();
    }

    protected void UpdateUsernamePasswordAndClose()
    {
        IMSSettings settings = IMS.Instance.CurrentSettings.Clone() as IMSSettings;
        settings.Username = CurrentUsernameValue;
        if (CurrentPasswordValue != null)
        {
            settings.PasswordHash = Encryption.HashBytes(Encoding.UTF8.GetBytes(CurrentPasswordValue));
        }
        IMS.Instance.ChangeSettings(settings);
        Login.WriteLoginCookie(JSRuntime, Context);
        PopupManager.ClosePopup();
    }
}
