@namespace IMS_Interface

@page "/Login"
@layout EmptyLayout

@using System;
@using IMS_Library;
@using System.Text;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Http;
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor Context

<div>
    <div class="jumbotron" style="padding: 15px 20px 15px 20px; position: absolute; width: 400px; height: 310px; vertical-align: middle; margin: auto; top: 0px; right: 0px; bottom: 0px; left: 0px;">
        <label style="font-size:x-large">IMS Login</label>
        <br />
        <br />
        <label style="font-size:medium">Username</label>
        <br />
        <input class="form-control" style="width:100%" @bind="Username" />
        <br />
        <label style="font-size:medium">Password</label>
        <br />
        <input class="form-control" style="width:100%" type="password" @bind="Password" onkeyup="if (event.keyCode === 13) { document.getElementById('LoginButton').click(); }" />
        <br />
        <button class="btn btn-primary" id="LoginButton" type="submit" @onclick="AttemptLoginAsync">Login</button>
        <button class="btn btn-primary" style="margin-left:10px; background-color:transparent; color:#23527c" @onclick="RequestLoginReset">Reset username/password</button>
        <br />
        <div style="margin-top:10px">
            <label class="alert-danger" style="background-color:transparent; font-weight:normal;">@ErrorText</label>
        </div>
    </div>
</div>

@code {
    [Inject]
    protected NavigationManager Navigator { get; set; }

    public string ErrorText;

    public string Username = "";
    public string Password = "";

    private static string RealUsername => IMS.Instance.CurrentSettings.Username;
    private static byte[] RealPassword => IMS.Instance.CurrentSettings.PasswordHash;

    public static ILocalCredentialsResetter CredentialsResetter;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (HasValidLoginCookie(JSRuntime, Context))
        {
            Navigator.NavigateTo("/", true);
        }
    }

    public static bool IsLoginRequired => !(RealUsername is null && RealPassword is null);

    public async Task AttemptLoginAsync()
    {
        if (!IsLoginRequired)
        {
            Navigator.NavigateTo("/");
        }
        if (Username == RealUsername && Enumerable.SequenceEqual(Encryption.HashBytes(Encoding.UTF8.GetBytes(Password)), RealPassword))
        {
            await WriteLoginCookie(JSRuntime, Context);
            Navigator.NavigateTo("/");
        }
        else
        {
            ErrorText = "Incorrect username or password.";
        }
    }

    public void RequestLoginReset()
    {
        if (CredentialsResetter is null)
        {
            ErrorText = "Couldn't make a local credential reset request.";
        }
        else
        {
            CredentialsResetter.ResetCredentialsAsync();
            ErrorText = "A reset request was made on the host computer.";
        }
    }

    public static bool HasValidLoginCookie(IJSRuntime runtime, IHttpContextAccessor context)
    {
        if (RealUsername is null && RealPassword is null)
        {
            return true;
        }
        string toCompare = ByteArrayToString(Encryption.HashBytes(Concat(Encoding.ASCII.GetBytes(RealUsername + context.HttpContext.Connection.RemoteIpAddress.MapToIPv4().ToString()), RealPassword)));
        return toCompare == context.HttpContext.Request.Cookies["LoginKey"];
    }

    public static async Task WriteLoginCookie(IJSRuntime runtime, IHttpContextAccessor context)
    {
        await runtime.InvokeVoidAsync("setCookie", "LoginKey", ByteArrayToString(Encryption.HashBytes(Concat(Encoding.ASCII.GetBytes(RealUsername + context.HttpContext.Connection.RemoteIpAddress.MapToIPv4().ToString()), RealPassword))), 36500);
    }

    public static async Task DeleteLoginCookie(IJSRuntime runtime)
    {
        await runtime.InvokeVoidAsync("deleteCookie", "LoginKey");
    }

    private static string ByteArrayToString(byte[] ba)
    {
        StringBuilder hex = new StringBuilder(ba.Length * 2);
        foreach (byte b in ba)
            hex.AppendFormat("{0:x2}", b);
        return hex.ToString();
    }

    private static T[] Concat<T>(T[] x, T[] y)
    {
        if (x == null) x = new T[0];
        if (y == null) y = new T[0];
        int oldLen = x.Length;
        Array.Resize<T>(ref x, x.Length + y.Length);
        Array.Copy(y, 0, x, oldLen, y.Length);
        return x;
    }

    public interface ILocalCredentialsResetter
    {
        Task ResetCredentialsAsync();
    }
}
