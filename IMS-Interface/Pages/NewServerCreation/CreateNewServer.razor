@namespace IMS_Interface

@using IMS_Library
@using System.IO

@page "/CreateNewServer"

@implements IDisposable
@inject ServerProvider ServerSelector
@inject PopupProvider PopupManager
@inject NavigationManager Navigator

<h3>Create New Server</h3>
<MultiToggle OnSelectionChange="SetServerTypeSelection" Options="BindingNames"></MultiToggle>
<br />
<br />
<PreferenceEditor ApplyText="Create" RevertText="@null" StartingConfiguration="EditingConfiguration" FieldDisplays="Layout" OnApply="Apply" OnReset="Reset"></PreferenceEditor>

@code {
    protected ServerConfiguration EditingConfiguration { get; set; }
    protected List<PreferenceDisplay> Layout;

    protected string[] BindingNames => Provider.NewServerDisplayBinding.Select(x => x.DisplayName).ToArray();

    static CreateNewServer()
    {
        Provider.NewServerDisplayBinding.Add(
               new NewServerTypeBinding(
                   "Custom Bedrock",
                   () => new CustomBedrockServerConfiguration(),
                   () =>
                   {
                       List<PreferenceDisplay> display = new List<PreferenceDisplay>();
                       display.Add(new StringDisplay("ServerName", "Server name", "This setting determines the name of the server that will display in IMS."));
                       display.Add(new UploadServerBinaryDisplay("Server binary", "This is the .EXE file that acts as the server executable.",
                           config => Path.Combine(Constants.ExecutionPath + Constants.DataLocation + "/Temp/", config.ID.ToString()),
                           config => Path.Combine(Constants.ExecutionPath + Constants.ServerFolderLocation + "/" + config.ID, "server.exe")));
                       display.Add(new PortDisplay("ServerPort", "Server port", "This setting controls which port the server listens on."));
                       display.Add(new StringDisplay("ServerDisplayName", "Server display name", "This setting determines the name of the server that appears on players' title screens."));
                       display.Add(new PortDisplay("ServerPort", "Server port", "This setting controls which port the server listens on."));
                       display.Add(new PortDisplay("ServerPortV6", "Server port IPv6", "This setting controls which IPv6 port the server listens on.  This may be the same as the IPv4 port."));
                       display.Add(new MultiToggleDisplay("Difficulty", "Difficulty", "This setting controls the difficulty of the server.", new[] { "Peaceful", "Easy", "Normal", "Hard" }));
                       display.Add(new BooleanDisplay("AllowCheats", "Allow cheats", "This setting determines whether server operators can use commands in-game.", "Yes", "No"));
                       display.Add(new MultiToggleDisplay("Gamemode", "Gamemode", "This setting determines the default gamemode that new players spawn with.", new[] { "Survival", "Creative", "Adventure", "Spectator" }));
                       display.Add(new IntegerDisplay("MaxPlayers", "Maximum player count", "This setting determines the maximum number of players that can be on the server at once.", 0, int.MaxValue));
                       return display;
                   }
               )
           );
        Provider.NewServerDisplayBinding.Add(
        new NewServerTypeBinding(
            "Bedrock",
            () => new BedrockServerConfiguration(),
            () =>
            {
                List<PreferenceDisplay> display = new List<PreferenceDisplay>();
                display.Add(new StringDisplay("ServerName", "Server name", "This setting determines the name of the server that will display in IMS."));
                display.Add(new StringDisplay("ServerDisplayName", "Server display name", "This setting determines the name of the server that appears on players' title screens."));
                display.Add(new PortDisplay("ServerPort", "Server port", "This setting controls which port the server listens on."));
                display.Add(new PortDisplay("ServerPortV6", "Server port IPv6", "This setting controls which IPv6 port the server listens on.  This may be the same as the IPv4 port."));
                display.Add(new MultiToggleDisplay("Difficulty", "Difficulty", "This setting controls the difficulty of the server.", new[] { "Peaceful", "Easy", "Normal", "Hard" }));
                display.Add(new BooleanDisplay("AllowCheats", "Allow cheats", "This setting determines whether server operators can use commands in-game.", "Yes", "No"));
                display.Add(new MultiToggleDisplay("Gamemode", "Gamemode", "This setting determines the default gamemode that new players spawn with.", new[] { "Survival", "Creative", "Adventure", "Spectator" }));
                display.Add(new IntegerDisplay("MaxPlayers", "Maximum player count", "This setting determines the maximum number of players that can be on the server at once.", 0, int.MaxValue));
                return display;
            }
        )
    );
        Provider.NewServerDisplayBinding.Add(
            new NewServerTypeBinding(
                "Custom Java",
                () => new CustomJavaServerConfiguration(),
                () =>
                {
                    List<PreferenceDisplay> display = new List<PreferenceDisplay>();
                    display.Add(new StringDisplay("ServerName", "Server name", "This setting determines the name of the server that will display in IMS."));
                    display.Add(new UploadServerBinaryDisplay("Server binary", "This is the .JAR file that contains the server executable's information.",
                        config => Path.Combine(Constants.ExecutionPath + Constants.DataLocation + "/Temp/", config.ID.ToString()),
                        config => Path.Combine(Constants.ExecutionPath + Constants.ServerFolderLocation + "/" + config.ID, "server.jar")));
                    display.Add(new PortDisplay("ServerPort", "Server port", "This setting controls which port the server listens on."));
                    display.Add(new IntegerDisplay("MinimumMemoryMB", "Minimum memory", "This setting determines the minimum amount of RAM in MB that Java reserves for the server.", 0, int.MaxValue));
                    display.Add(new IntegerDisplay("MaximumMemoryMB", "Maximum memory", "This setting determines the maximum amount of RAM in MB that Java will use for the server.", 0, int.MaxValue));
                    display.Add(new HardcoreDisplay("Difficulty", "HardcoreMode", "Difficulty", "This setting controls the difficulty of the server.", new[] { "Peaceful", "Easy", "Normal", "Hard", "Hardcore" }));
                    display.Add(new MultiToggleDisplay("Gamemode", "Gamemode", "This setting determines the default gamemode that new players spawn with.", new[] { "Survival", "Creative", "Adventure", "Spectator" }));
                    display.Add(new IntegerDisplay("MaxPlayers", "Maximum player count", "This setting determines the maximum number of players that can be on the server at once.", 0, int.MaxValue));
                    display.Add(new BooleanDisplay("EnablePVP", "Enable PVP", "This setting determines whether players can attack/kill one another.", "Yes", "No"));
                    return display;
                }
            )
        );
        Provider.NewServerDisplayBinding.Add(
            new NewServerTypeBinding(
                "Java",
                () => new JavaServerConfiguration(),
                () =>
                {
                    List<PreferenceDisplay> display = new List<PreferenceDisplay>();
                    display.Add(new StringDisplay("ServerName", "Server name", "This setting determines the name of the server that will display in IMS."));
                    display.Add(new MinecraftVersionDisplayView.MinecraftVersionDisplay("ServerVersion", "Server version", "This setting determines what version of Minecraft the server runs."));
                    display.Add(new PortDisplay("ServerPort", "Server port", "This setting controls which port the server listens on."));
                    display.Add(new IntegerDisplay("MinimumMemoryMB", "Minimum memory", "This setting determines the minimum amount of RAM in MB that Java reserves for the server.", 0, int.MaxValue));
                    display.Add(new IntegerDisplay("MaximumMemoryMB", "Maximum memory", "This setting determines the maximum amount of RAM in MB that Java will use for the server.", 0, int.MaxValue));
                    display.Add(new HardcoreDisplay("Difficulty", "HardcoreMode", "Difficulty", "This setting controls the difficulty of the server.", new[] { "Peaceful", "Easy", "Normal", "Hard", "Hardcore" }));
                    display.Add(new MultiToggleDisplay("Gamemode", "Gamemode", "This setting determines the default gamemode that new players spawn with.", new[] { "Survival", "Creative", "Adventure", "Spectator" }));
                    display.Add(new IntegerDisplay("MaxPlayers", "Maximum player count", "This setting determines the maximum number of players that can be on the server at once.", 0, int.MaxValue));
                    display.Add(new BooleanDisplay("EnablePVP", "Enable PVP", "This setting determines whether players can attack/kill one another.", "Yes", "No"));
                    return display;
                }
            )
        );
    }

    protected override void OnInitialized()
    {
        SetServerTypeSelection(0);
    }

    protected void SetServerTypeSelection(int selection)
    {
        NewServerTypeBinding binding = Provider.NewServerDisplayBinding.ElementAt(selection);
        EditingConfiguration = binding.PreferenceConfigurationGenerator();
        Layout = binding.PreferenceLayoutGenerator();
    }

    protected void Apply(IMSConfiguration config)
    {
        UploadServerBinaryDisplay display = (UploadServerBinaryDisplay)Layout.Find(x => x is UploadServerBinaryDisplay);
        if(display != null)
        {
            string file = display.TemporaryFilePath((ServerConfiguration)config);
            string finalPath = display.FinalFilePath((ServerConfiguration)config);
            if (File.Exists(file))
            {
                if (!Directory.Exists(Path.GetDirectoryName(finalPath)))
                {
                    Directory.CreateDirectory(Path.GetDirectoryName(finalPath));
                }
                File.Copy(file, finalPath);
            }
            else {
                PopupManager.ShowPopup(new InformationPopupDisplay("To create a custom Java server, a Java server binary (.jar file) is required!", "Cannot create server.", x => { }));
                return;
            }
        }
        ServerSelector.CurrentServer = IMS.Instance.ServerManager.AddServer((ServerConfiguration)config);
        ServerSelector.CurrentServer.StartAsync();
        Navigator.NavigateTo("/");
    }

    protected void Reset(IMSConfiguration config)
    {
        UploadServerBinaryDisplay display = (UploadServerBinaryDisplay)Layout.Find(x => x is UploadServerBinaryDisplay);
        if (display != null)
        {
            string path = display.TemporaryFilePath((ServerConfiguration)config);
            if (File.Exists(path))
            {
                File.Delete(path);
            }
        }
    }

    public void Dispose()
    {
        Reset(EditingConfiguration);
    }
}