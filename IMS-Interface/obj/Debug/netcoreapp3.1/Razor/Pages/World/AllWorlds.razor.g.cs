#pragma checksum "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "420c46eefc826ea3356c8a02b8062c688fda3901"
// <auto-generated/>
#pragma warning disable 1591
namespace IMS_Interface.Pages.World
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using IMS_Interface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using IMS_Interface.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using IMS_Interface.Shared.Preferences;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using IMS_Interface.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using IMS_Interface.Pages.Player;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
using IMS_Library;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
using Blazor.FileReader;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/AllWorlds")]
    public partial class AllWorlds : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, @"<style>
    .world-card {
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        width: 200px;
        height: 250px;
        border-radius: 5px;
        display: inline-grid;
        margin: 5px;
        image-rendering:pixelated;
        background-color:white;
    }

    .world-card > img {
        border-radius: 5px 5px 0 0;
        width: 100%;
        object-fit: cover;
    }

    .world-card-container {
        padding: 10px;
        line-height:30px;
        height:50px;
    }
</style>

");
            __builder.AddMarkupContent(1, "<h3>Manage Worlds</h3>\r\n");
            __builder.OpenElement(2, "label");
            __builder.AddAttribute(3, "class", "btn btn-primary");
            __builder.AddAttribute(4, "style", "padding:6px");
            __builder.AddAttribute(5, "disabled", 
#nullable restore
#line 37 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                                                              IsExecutingTask

#line default
#line hidden
#nullable disable
            );
            __builder.AddMarkupContent(6, "\r\n");
#nullable restore
#line 38 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
     if (CurrentWorldUpload != null)
    {
        

#line default
#line hidden
#nullable disable
            __builder.AddContent(7, 
#nullable restore
#line 40 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
          "Uploading... (" + Math.Round((double)CurrentWorldUpload.UploadedSize / CurrentWorldUpload.TotalSize * 100) + "%)"

#line default
#line hidden
#nullable disable
            );
#nullable restore
#line 40 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                                                                                                                             
    }
    else
    {
        

#line default
#line hidden
#nullable disable
            __builder.AddContent(8, 
#nullable restore
#line 44 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
          "Upload new world"

#line default
#line hidden
#nullable disable
            );
#nullable restore
#line 44 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                             
    }

#line default
#line hidden
#nullable disable
            __builder.AddContent(9, "    ");
            __builder.OpenElement(10, "input");
            __builder.AddAttribute(11, "type", "file");
            __builder.AddAttribute(12, "class", "btn btn-primary");
            __builder.AddAttribute(13, "style", "display:none");
            __builder.AddAttribute(14, "multiple", true);
            __builder.AddAttribute(15, "webkitdirectory", true);
            __builder.AddAttribute(16, "mozdirectory", true);
            __builder.AddAttribute(17, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 46 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                                                                                                                                          BeginWorldUpload

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(18, "disabled", 
#nullable restore
#line 46 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                                                                                                                                                                       IsExecutingTask

#line default
#line hidden
#nullable disable
            );
            __builder.AddElementReferenceCapture(19, (__value) => {
#nullable restore
#line 46 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                 NewWorldInput = __value;

#line default
#line hidden
#nullable disable
            }
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(20, "\r\n");
            __builder.CloseElement();
            __builder.AddMarkupContent(21, "\r\n");
            __builder.OpenElement(22, "button");
            __builder.AddAttribute(23, "class", "btn btn-primary");
            __builder.AddAttribute(24, "disabled", 
#nullable restore
#line 48 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                                           IsExecutingTask

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(25, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 48 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                                                                      OnCreateNewWorld

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(26, "Generate new world");
            __builder.CloseElement();
            __builder.AddMarkupContent(27, "\r\n<br>\r\n");
            __builder.AddMarkupContent(28, @"<label style=""margin-top:2px;font-weight:normal; color:gray;"">Java worlds are usually located at
    <button style=""background-color:transparent; border:none"" onclick=""navigator.clipboard.writeText('%AppData%\\.minecraft\\saves')"">
        <b style=""border-bottom: 1px dotted #000;"" data-toggle=""tooltip"" data-container=""app"" data-trigger=""hover"" data-placement=""top"" title=""Click to copy path"">%AppData%\.minecraft\saves</b>
    </button>and Bedrock worlds at
    <button style=""background-color:transparent; border:none"" onclick=""navigator.clipboard.writeText('%LocalAppData%\\Packages\\Microsoft.MinecraftUWP_8wekyb3d8bbwe\\LocalState\\games\\com.mojang\\minecraftWorlds')"">
        <b style=""border-bottom: 1px dotted #000;"" data-toggle=""tooltip"" data-container=""app"" data-trigger=""hover"" data-placement=""top"" title=""Click to copy path"">%LocalAppData%\Packages\Microsoft.MinecraftUWP_8wekyb3d8bbwe\LocalState\games\com.mojang\minecraftWorlds</b>
    </button>
</label>
<hr>
");
            __builder.OpenElement(29, "div");
            __builder.AddAttribute(30, "style", "padding:2px");
            __builder.AddMarkupContent(31, "\r\n");
#nullable restore
#line 60 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
       
        IList<ServerProxy> loadedServers = IMS.AsThreadSafe(() => IMS.Instance.ServerManager.Servers);
        ServerProxy selectedServer = loadedServers.Where(x => x.ID == CurrentServerID).First();
    

#line default
#line hidden
#nullable disable
#nullable restore
#line 64 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
     foreach (World world in IMS.AsThreadSafe(() => IMS.Instance.WorldManager.LoadedWorlds).OrderBy(x => x.Name))
    {

#line default
#line hidden
#nullable disable
            __builder.AddContent(32, "        ");
            __builder.OpenElement(33, "div");
            __builder.AddAttribute(34, "class", "world-card");
            __builder.AddMarkupContent(35, "\r\n            ");
            __builder.OpenElement(36, "img");
            __builder.AddAttribute(37, "src", 
#nullable restore
#line 67 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                       GetRelativeWorldIcon(world)

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(38, "style", "width:200px; height:200px");
            __builder.CloseElement();
            __builder.AddMarkupContent(39, "\r\n            ");
            __builder.OpenElement(40, "div");
            __builder.AddAttribute(41, "class", "world-card-container");
            __builder.AddMarkupContent(42, "\r\n");
#nullable restore
#line 69 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                  
                    ServerProxy server = loadedServers.Where(x => x.CurrentConfiguration.WorldID == world.ID).FirstOrDefault();
                    if (server != null)
                    {

#line default
#line hidden
#nullable disable
            __builder.AddContent(43, "                        ");
            __builder.OpenElement(44, "label");
            __builder.AddAttribute(45, "style", "display:inline-block; position:relative; bottom:10px");
            __builder.AddAttribute(46, "data-toggle", "tooltip");
            __builder.AddAttribute(47, "data-container", "app");
            __builder.AddAttribute(48, "data-trigger", "hover");
            __builder.AddAttribute(49, "data-placement", "top");
            __builder.AddAttribute(50, "title", 
#nullable restore
#line 73 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                                                                                                                                                                                         "World " + (server.State == ServerProxy.ServerState.Disabled ? "mounted" : "running") + " on " + server.CurrentConfiguration.ServerName

#line default
#line hidden
#nullable disable
            );
            __builder.AddMarkupContent(51, "⛏");
            __builder.CloseElement();
            __builder.AddMarkupContent(52, "\r\n");
#nullable restore
#line 74 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                    }

#line default
#line hidden
#nullable disable
            __builder.AddContent(53, "                    ");
            __builder.OpenElement(54, "a");
            __builder.AddAttribute(55, "href", 
#nullable restore
#line 75 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                               "WorldManager/" + world.ID

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(56, "style", "white-space: nowrap; overflow: hidden; width: 154px; text-overflow: ellipsis; display: inline-block;");
            __builder.AddContent(57, 
#nullable restore
#line 75 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                                                                                                                                                                           world.Name

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.AddMarkupContent(58, "\r\n                    ");
            __builder.OpenElement(59, "div");
            __builder.AddAttribute(60, "style", "float:right; position:relative; margin-top:-2px; display:inline-block");
            __builder.AddMarkupContent(61, "\r\n                        ");
            __builder.OpenElement(62, "select");
            __builder.AddAttribute(63, "class", "btn");
            __builder.AddAttribute(64, "style", "width:30px; -webkit-appearance:none; color:black; position:absolute; right:0");
            __builder.AddAttribute(65, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 77 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                                                                                                                                            x => TakeActionOnWorld((string)x.Value, world, server)

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(66, "keepSelectedIndexAtZero", true);
            __builder.AddMarkupContent(67, "\r\n                            ");
            __builder.OpenElement(68, "option");
            __builder.AddAttribute(69, "selected", true);
            __builder.AddAttribute(70, "disabled", true);
            __builder.AddAttribute(71, "hidden", true);
            __builder.AddMarkupContent(72, "⋮");
            __builder.CloseElement();
            __builder.AddMarkupContent(73, "\r\n");
#nullable restore
#line 79 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                             if (server is null && selectedServer.SupportedEdition == world.Edition)
                            {

#line default
#line hidden
#nullable disable
            __builder.AddContent(74, "                                ");
            __builder.OpenElement(75, "option");
            __builder.AddMarkupContent(76, "\r\n                                    Set as server world\r\n                                ");
            __builder.CloseElement();
            __builder.AddMarkupContent(77, "\r\n");
#nullable restore
#line 84 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
                            }

#line default
#line hidden
#nullable disable
            __builder.AddContent(78, "                            ");
            __builder.OpenElement(79, "option");
            __builder.AddMarkupContent(80, "\r\n                                Rename\r\n                            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(81, "\r\n                            ");
            __builder.OpenElement(82, "option");
            __builder.AddMarkupContent(83, "\r\n                                Change world icon\r\n                            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(84, "\r\n                            ");
            __builder.OpenElement(85, "option");
            __builder.AddMarkupContent(86, "\r\n                                Delete\r\n                            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(87, "\r\n                        ");
            __builder.CloseElement();
            __builder.AddMarkupContent(88, "\r\n                    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(89, "\r\n");
            __builder.AddContent(90, "            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(91, "\r\n        ");
            __builder.CloseElement();
            __builder.AddMarkupContent(92, "\r\n");
#nullable restore
#line 99 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
    }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 103 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\World\AllWorlds.razor"
       
    protected static bool IsExecutingTask { get => CurrentTask != null && !CurrentTask.IsCompleted; }
    protected static Task CurrentTask;

    protected ElementReference NewWorldInput;
    protected WorldUpload CurrentWorldUpload = null;

    [CascadingParameter(Name = "CurrentServer")]
    protected Guid CurrentServerID { get; set; }
    protected int WorldSelection { get => 0; set { return; } }

    protected string GetRelativeWorldIcon(World world)
    {
        if (File.Exists(world.IconPath))
        {
            return Cache.CacheFile(world.IconPath);
        }
        else
        {
            return world.Edition == World.WorldType.Java ? "/img/grass_block.png" : "/img/bedrock.png";
        }
    }

    protected void OnCreateNewWorld()
    {
        ServerProxy server = IMS.AsThreadSafe(() => IMS.Instance.ServerManager.GetServer(CurrentServerID));
        PopupManager.ShowPopup(new CreateNewWorldPopupDisplayView.CreateNewWorldPopupDisplay(server.SupportedEdition, (name, seed, parameters) => {
            StateHasChanged();
            Task.Run(() => {
                World world = new World(Guid.NewGuid());
                world.Name = name;
                world.Edition = server.CurrentConfiguration.Edition;
                bool startServer = false;
                IMS.AsThreadSafe(() =>
                {
                    IMS.Instance.WorldManager.AddWorldToRegistry(world);
                    if(server.State != ServerProxy.ServerState.Disabled)
                    {
                        server.Stop();
                        startServer = true;
                    }
                    server.CurrentConfiguration.WorldID = world.ID;
                    if(server.CurrentConfiguration is JavaServerConfiguration)
                    {
                        (server.CurrentConfiguration as JavaServerConfiguration).LevelSeed = seed;
                        (server.CurrentConfiguration as JavaServerConfiguration).LevelType = parameters;
                    }
                });
                if (startServer)
                {
                    while(server.State != ServerProxy.ServerState.Disabled) { Thread.Sleep(1); }
                    server.Start();
                }
                InvokeAsync(() =>
                {
                    PopupManager.ClosePopup();
                    StateHasChanged();
                });
            });
        }));
    }

    protected void BeginWorldUpload()
    {
        CurrentTask = UploadWorldAsync();
    }

    protected async Task UploadWorldAsync()
    {
        await Task.Run(() =>
        {
            try
            {
                IEnumerable<IFileReference> fileUpload = FileReader.CreateReference(NewWorldInput).EnumerateFilesAsync().Result;
                IEnumerable<IFileInfo> fileInfo = fileUpload.Select(x => x.ReadFileInfoAsync().Result);
                if (fileInfo.Where(x => x.Name == "level.dat").Count() == 0)
                {
                    Console.WriteLine("Invalid world");
                }
                else
                {
                    CurrentWorldUpload = new WorldUpload();
                    foreach (IFileInfo file in fileInfo)
                    {
                        CurrentWorldUpload.TotalSize += file.Size;
                    }
                    World world = new World(Guid.NewGuid());
                    world.Name = fileInfo.First().WebkitRelativePath.Remove(fileInfo.First().WebkitRelativePath.IndexOf("/"));
                    if (fileInfo.Where(x => x.Name == "levelname.txt").Count() > 0)
                    {
                        world.Edition = World.WorldType.Bedrock;
                    }
                    else
                    {
                        world.Edition = World.WorldType.Java;
                    }
                    Directory.CreateDirectory(world.WorldPath);
                    int i = 0;
                    foreach (IFileReference entry in fileUpload)
                    {
                        IFileInfo info = fileInfo.ElementAt(i);
                        string entryLocation = world.WorldPath + "/" + info.WebkitRelativePath.Substring(info.WebkitRelativePath.IndexOf("/") + 1);
                        string entryPath = new FileInfo(entryLocation).Directory.FullName;
                        if (!Directory.Exists(entryPath))
                        {
                            Directory.CreateDirectory(entryPath);
                        }
                        using (Stream fileStream = File.Create(entryLocation))
                        using (MemoryStream memoryStream = entry.CreateMemoryStreamAsync(1024 * 1024).Result)
                        {
                            memoryStream.CopyToAsync(fileStream).Wait();
                        }
                        CurrentWorldUpload.UploadedSize += info.Size;
                        InvokeAsync(StateHasChanged);
                        i++;
                    }
                    CurrentWorldUpload = null;
                    IMS.AsThreadSafe(() => IMS.Instance.WorldManager.AddWorldToRegistry(world));
                    world.SaveConfiguration();
                    CurrentTask = null;
                    InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        });
    }

    protected sealed class WorldUpload
    {
        public long TotalSize;
        public long UploadedSize;
    }

    protected void TakeActionOnWorld(string action, World world, ServerProxy mountedServer)
    {
        switch(action) {
            case "Rename":
                PopupManager.ShowPopup(new RenameWorldDisplayView.RenameWorldDisplay(world, StateHasChanged));
                break;
            case "Delete":
                PopupManager.ShowPopup(new DeleteWorldDisplayView.DeleteWorldDisplay(world, mountedServer is null ? null : mountedServer.CurrentConfiguration.ServerName, StateHasChanged));
                break;
            case "Change world icon":
                PopupManager.ShowPopup(new ChangeWorldIconDisplayView.ChangeWorldIconDisplay(world, mountedServer is null ? null : mountedServer.CurrentConfiguration.ServerName, StateHasChanged));
                break;
            case "Set as server world":
                PopupManager.ShowPopup(new ChangingWorldDisplayView.ChangingWorldDisplay(world, IMS.AsThreadSafe(() => IMS.Instance.ServerManager.GetServer(CurrentServerID)), StateHasChanged));
                break;
            default:
                throw new InvalidOperationException();
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PopupProvider PopupManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFileReaderService FileReader { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private FileCache Cache { get; set; }
    }
}
#pragma warning restore 1591
