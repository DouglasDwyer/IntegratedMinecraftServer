#pragma checksum "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\NewServerCreation\CreateNewServer.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0fada63054a663484ad14ee3a12466fe3fa05061"
// <auto-generated/>
#pragma warning disable 1591
namespace IMS_Interface
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using IMS_Interface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using IMS_Interface.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using IMS_Interface.Player;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using IMS_Interface.World;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using IMS_Interface.Preferences;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\NewServerCreation\CreateNewServer.razor"
using IMS_Library;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\NewServerCreation\CreateNewServer.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/CreateNewServer")]
    public partial class CreateNewServer : Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, "<h3>Create New Server</h3>\r\n");
            __builder.OpenComponent<IMS_Interface.MultiToggle>(1);
            __builder.AddAttribute(2, "OnSelectionChange", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<System.Int32>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<System.Int32>(this, 
#nullable restore
#line 14 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\NewServerCreation\CreateNewServer.razor"
                                SetServerTypeSelection

#line default
#line hidden
#nullable disable
            )));
            __builder.AddAttribute(3, "Options", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.String[]>(
#nullable restore
#line 14 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\NewServerCreation\CreateNewServer.razor"
                                                                 BindingNames

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseComponent();
            __builder.AddMarkupContent(4, "\r\n<br>\r\n<br>\r\n");
            __builder.OpenComponent<IMS_Interface.Preferences.PreferenceEditor>(5);
            __builder.AddAttribute(6, "ApplyText", "Create");
            __builder.AddAttribute(7, "RevertText", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.String>(
#nullable restore
#line 17 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\NewServerCreation\CreateNewServer.razor"
                                                  null

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(8, "StartingConfiguration", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<IMS_Library.IMSConfiguration>(
#nullable restore
#line 17 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\NewServerCreation\CreateNewServer.razor"
                                                                               EditingConfiguration

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(9, "FieldDisplays", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Collections.Generic.List<IMS_Interface.Preferences.PreferenceDisplay>>(
#nullable restore
#line 17 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\NewServerCreation\CreateNewServer.razor"
                                                                                                                    Layout

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(10, "OnApply", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<IMS_Library.IMSConfiguration>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<IMS_Library.IMSConfiguration>(this, 
#nullable restore
#line 17 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\NewServerCreation\CreateNewServer.razor"
                                                                                                                                     Apply

#line default
#line hidden
#nullable disable
            )));
            __builder.AddAttribute(11, "OnReset", Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<Microsoft.AspNetCore.Components.EventCallback<IMS_Library.IMSConfiguration>>(Microsoft.AspNetCore.Components.EventCallback.Factory.Create<IMS_Library.IMSConfiguration>(this, 
#nullable restore
#line 17 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\NewServerCreation\CreateNewServer.razor"
                                                                                                                                                     Reset

#line default
#line hidden
#nullable disable
            )));
            __builder.CloseComponent();
        }
        #pragma warning restore 1998
#nullable restore
#line 19 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Pages\NewServerCreation\CreateNewServer.razor"
       
    protected ServerConfiguration EditingConfiguration { get; set; }
    protected List<PreferenceDisplay> Layout;

    protected string[] BindingNames => Provider.NewServerDisplayBinding.Select(x => x.DisplayName).ToArray();

    static CreateNewServer()
    {
        Provider.NewServerDisplayBinding.Add(
               new NewServerTypeBinding(
                   "Custom Bedrock",
                   () => new CustomBedrockServerConfiguration(),
                   () =>
                   {
                       List<PreferenceDisplay> display = new List<PreferenceDisplay>();
                       display.Add(new StringDisplay("ServerName", "Server name", "This setting determines the name of the server that will display in IMS."));
                       display.Add(new UploadServerBinaryDisplay("Server binary", "This is the .EXE file that acts as the server executable.",
                           config => Path.Combine(Constants.ExecutionPath + Constants.DataLocation + "/Temp/", config.ID.ToString()),
                           config => Path.Combine(Constants.ExecutionPath + Constants.ServerFolderLocation + "/" + config.ID, "server.exe")));
                       display.Add(new PortDisplay("ServerPort", "Server port", "This setting controls which port the server listens on."));
                       display.Add(new StringDisplay("ServerDisplayName", "Server display name", "This setting determines the name of the server that appears on players' title screens."));
                       display.Add(new PortDisplay("ServerPort", "Server port", "This setting controls which port the server listens on."));
                       display.Add(new PortDisplay("ServerPortV6", "Server port IPv6", "This setting controls which IPv6 port the server listens on.  This may be the same as the IPv4 port."));
                       display.Add(new MultiToggleDisplay("Difficulty", "Difficulty", "This setting controls the difficulty of the server.", new[] { "Peaceful", "Easy", "Normal", "Hard" }));
                       display.Add(new BooleanDisplay("AllowCheats", "Allow cheats", "This setting determines whether server operators can use commands in-game.", "Yes", "No"));
                       display.Add(new MultiToggleDisplay("Gamemode", "Gamemode", "This setting determines the default gamemode that new players spawn with.", new[] { "Survival", "Creative", "Adventure", "Spectator" }));
                       display.Add(new IntegerDisplay("MaxPlayers", "Maximum player count", "This setting determines the maximum number of players that can be on the server at once.", 0, int.MaxValue));
                       return display;
                   }
               )
           );
        Provider.NewServerDisplayBinding.Add(
        new NewServerTypeBinding(
            "Bedrock",
            () => new BedrockServerConfiguration(),
            () =>
            {
                List<PreferenceDisplay> display = new List<PreferenceDisplay>();
                display.Add(new StringDisplay("ServerName", "Server name", "This setting determines the name of the server that will display in IMS."));
                display.Add(new StringDisplay("ServerDisplayName", "Server display name", "This setting determines the name of the server that appears on players' title screens."));
                display.Add(new PortDisplay("ServerPort", "Server port", "This setting controls which port the server listens on."));
                display.Add(new PortDisplay("ServerPortV6", "Server port IPv6", "This setting controls which IPv6 port the server listens on.  This may be the same as the IPv4 port."));
                display.Add(new MultiToggleDisplay("Difficulty", "Difficulty", "This setting controls the difficulty of the server.", new[] { "Peaceful", "Easy", "Normal", "Hard" }));
                display.Add(new BooleanDisplay("AllowCheats", "Allow cheats", "This setting determines whether server operators can use commands in-game.", "Yes", "No"));
                display.Add(new MultiToggleDisplay("Gamemode", "Gamemode", "This setting determines the default gamemode that new players spawn with.", new[] { "Survival", "Creative", "Adventure", "Spectator" }));
                display.Add(new IntegerDisplay("MaxPlayers", "Maximum player count", "This setting determines the maximum number of players that can be on the server at once.", 0, int.MaxValue));
                return display;
            }
        )
    );
        Provider.NewServerDisplayBinding.Add(
            new NewServerTypeBinding(
                "Custom Java",
                () => new CustomJavaServerConfiguration(),
                () =>
                {
                    List<PreferenceDisplay> display = new List<PreferenceDisplay>();
                    display.Add(new StringDisplay("ServerName", "Server name", "This setting determines the name of the server that will display in IMS."));
                    display.Add(new UploadServerBinaryDisplay("Server binary", "This is the .JAR file that contains the server executable's information.",
                        config => Path.Combine(Constants.ExecutionPath + Constants.DataLocation + "/Temp/", config.ID.ToString()),
                        config => Path.Combine(Constants.ExecutionPath + Constants.ServerFolderLocation + "/" + config.ID, "server.jar")));
                    display.Add(new PortDisplay("ServerPort", "Server port", "This setting controls which port the server listens on."));
                    display.Add(new IntegerDisplay("MinimumMemoryMB", "Minimum memory", "This setting determines the minimum amount of RAM in MB that Java reserves for the server.", 0, int.MaxValue));
                    display.Add(new IntegerDisplay("MaximumMemoryMB", "Maximum memory", "This setting determines the maximum amount of RAM in MB that Java will use for the server.", 0, int.MaxValue));
                    display.Add(new HardcoreDisplay("Difficulty", "HardcoreMode", "Difficulty", "This setting controls the difficulty of the server.", new[] { "Peaceful", "Easy", "Normal", "Hard", "Hardcore" }));
                    display.Add(new MultiToggleDisplay("Gamemode", "Gamemode", "This setting determines the default gamemode that new players spawn with.", new[] { "Survival", "Creative", "Adventure", "Spectator" }));
                    display.Add(new IntegerDisplay("MaxPlayers", "Maximum player count", "This setting determines the maximum number of players that can be on the server at once.", 0, int.MaxValue));
                    display.Add(new BooleanDisplay("EnablePVP", "Enable PVP", "This setting determines whether players can attack/kill one another.", "Yes", "No"));
                    return display;
                }
            )
        );
        Provider.NewServerDisplayBinding.Add(
            new NewServerTypeBinding(
                "Java",
                () => new JavaServerConfiguration(),
                () =>
                {
                    List<PreferenceDisplay> display = new List<PreferenceDisplay>();
                    display.Add(new StringDisplay("ServerName", "Server name", "This setting determines the name of the server that will display in IMS."));
                    display.Add(new MinecraftVersionDisplayView.MinecraftVersionDisplay("ServerVersion", "Server version", "This setting determines what version of Minecraft the server runs."));
                    display.Add(new PortDisplay("ServerPort", "Server port", "This setting controls which port the server listens on."));
                    display.Add(new IntegerDisplay("MinimumMemoryMB", "Minimum memory", "This setting determines the minimum amount of RAM in MB that Java reserves for the server.", 0, int.MaxValue));
                    display.Add(new IntegerDisplay("MaximumMemoryMB", "Maximum memory", "This setting determines the maximum amount of RAM in MB that Java will use for the server.", 0, int.MaxValue));
                    display.Add(new HardcoreDisplay("Difficulty", "HardcoreMode", "Difficulty", "This setting controls the difficulty of the server.", new[] { "Peaceful", "Easy", "Normal", "Hard", "Hardcore" }));
                    display.Add(new MultiToggleDisplay("Gamemode", "Gamemode", "This setting determines the default gamemode that new players spawn with.", new[] { "Survival", "Creative", "Adventure", "Spectator" }));
                    display.Add(new IntegerDisplay("MaxPlayers", "Maximum player count", "This setting determines the maximum number of players that can be on the server at once.", 0, int.MaxValue));
                    display.Add(new BooleanDisplay("EnablePVP", "Enable PVP", "This setting determines whether players can attack/kill one another.", "Yes", "No"));
                    return display;
                }
            )
        );
    }

    protected override void OnInitialized()
    {
        SetServerTypeSelection(0);
    }

    protected void SetServerTypeSelection(int selection)
    {
        NewServerTypeBinding binding = Provider.NewServerDisplayBinding.ElementAt(selection);
        EditingConfiguration = binding.PreferenceConfigurationGenerator();
        Layout = binding.PreferenceLayoutGenerator();
    }

    protected void Apply(IMSConfiguration config)
    {
        UploadServerBinaryDisplay display = (UploadServerBinaryDisplay)Layout.Find(x => x is UploadServerBinaryDisplay);
        if(display != null)
        {
            string file = display.TemporaryFilePath((ServerConfiguration)config);
            string finalPath = display.FinalFilePath((ServerConfiguration)config);
            if (File.Exists(file))
            {
                if (!Directory.Exists(Path.GetDirectoryName(finalPath)))
                {
                    Directory.CreateDirectory(Path.GetDirectoryName(finalPath));
                }
                File.Copy(file, finalPath);
            }
            else {
                PopupManager.ShowPopup(new InformationPopupDisplay("To create a custom Java server, a Java server binary (.jar file) is required!", "Cannot create server.", x => { }));
                return;
            }
        }
        ServerSelector.CurrentServer = IMS.Instance.ServerManager.AddServer((ServerConfiguration)config);
        ServerSelector.CurrentServer.StartAsync();
        Navigator.NavigateTo("/");
    }

    protected void Reset(IMSConfiguration config)
    {
        UploadServerBinaryDisplay display = (UploadServerBinaryDisplay)Layout.Find(x => x is UploadServerBinaryDisplay);
        if (display != null)
        {
            string path = display.TemporaryFilePath((ServerConfiguration)config);
            if (File.Exists(path))
            {
                File.Delete(path);
            }
        }
    }

    public void Dispose()
    {
        Reset(EditingConfiguration);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager Navigator { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PopupProvider PopupManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ServerProvider ServerSelector { get; set; }
    }
}
#pragma warning restore 1591
