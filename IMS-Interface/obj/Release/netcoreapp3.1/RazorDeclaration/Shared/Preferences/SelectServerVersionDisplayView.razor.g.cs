#pragma checksum "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Shared\Preferences\SelectServerVersionDisplayView.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4f8364157a3e8617947afcd83692e7023ae20eaa"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace IMS_Interface.Preferences
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using IMS_Interface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using IMS_Interface.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using IMS_Interface.Player;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using IMS_Interface.World;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\_Imports.razor"
using IMS_Interface.Preferences;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Shared\Preferences\SelectServerVersionDisplayView.razor"
using IMS_Library;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Shared\Preferences\SelectServerVersionDisplayView.razor"
using System.Reflection;

#line default
#line hidden
#nullable disable
    public partial class SelectServerVersionDisplayView : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 61 "D:\Projects\IntegratedMinecraftServer\IMS-Interface\Shared\Preferences\SelectServerVersionDisplayView.razor"
       

    [Parameter]
    public SelectServerVersionDisplay DisplayData { get; set; }

    protected bool IsWorking => CurrentTask != null;
    protected Task CurrentTask = null;

    protected IOrderedEnumerable<ServerVersionInformation> Information;
    protected ServerVersionInformation SelectedVersion;
    protected bool ShowSnapshots { get => Snapshots; set { Snapshots = value; EnsureSnapshotNotSelected(); } }
    private bool Snapshots;

    protected override void OnInitialized()
    {
        ShowSnapshots = !string.IsNullOrEmpty(DisplayData.CurrentServerVersion) && IMS.Instance.VersionManager.AvailableServerVersions[DisplayData.CurrentServerVersion].VersionType == ServerVersionInformation.ReleaseType.Snapshot;
        SelectedVersion = IMS.Instance.VersionManager.GetVersionInformationFromID(DisplayData.CurrentServerVersion);
    }

    protected void EnsureSnapshotNotSelected()
    {
        if (!ShowSnapshots && SelectedVersion != null && SelectedVersion.VersionType == ServerVersionInformation.ReleaseType.Snapshot)
        {
            SelectedVersion = IMS.Instance.VersionManager.GetVersionInformationFromID(DisplayData.CurrentServerVersion);
            StateHasChanged();
        }
    }

    protected bool IsVersionDownloaded(string version)
    {
        if (string.IsNullOrEmpty(version))
        {
            return IMS.Instance.VersionManager.LatestRelease.PhysicalLocation != null;
        }
        else
        {
            return IMS.Instance.VersionManager.AvailableServerVersions[version].PhysicalLocation != null;
        }
    }

    protected void BeginVersionDownloadAndSet(string version)
    {
        CurrentTask = DownloadVersionAndSetAsync(version);
    }

    protected async Task DownloadVersionAndSetAsync(string version)
    {
        ServerVersionInformation information = IMS.Instance.VersionManager.AvailableServerVersions.ContainsKey(version ?? "") ? IMS.Instance.VersionManager.AvailableServerVersions[version] : IMS.Instance.VersionManager.LatestRelease;
        if (information.PhysicalLocation is null)
        {
            try
            {
                await information.DownloadServerBinaryAsync();
            }
            catch (Exception e)
            {
                Logger.WriteWarning("Unable to download server binary for " + SelectedVersion.Name + "!\n" + e);
                PopupManager.ShowPopup(new InformationPopupDisplay("IMS was unable to download the server binary.  Check your internet connection or consult the IMS log for more details.", "Downloading error"));
                return;
            }
        }
        SetServerVersion(version);
        PopupManager.ClosePopup();
        DisplayData.OnUserFinish?.Invoke();
    }

    protected void SetServerVersion(string version)
    {
        DisplayData.FieldToChange.SetValue(DisplayData.Configuration, version);
    }

    public class SelectServerVersionDisplay : PopupDisplay<SelectServerVersionDisplayView>
    {
        public string CurrentServerVersion;
        public MinecraftEdition Edition;
        public Action OnUserFinish;
        public IMSConfiguration Configuration;
        public FieldInfo FieldToChange;

        public SelectServerVersionDisplay(string serverVersion, MinecraftEdition edition, IMSConfiguration configuration, FieldInfo fieldToChange, Action finish)
        {
            CurrentServerVersion = serverVersion;
            Edition = edition;
            OnUserFinish = finish;
            Configuration = configuration;
            FieldToChange = fieldToChange;
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PopupProvider PopupManager { get; set; }
    }
}
#pragma warning restore 1591
