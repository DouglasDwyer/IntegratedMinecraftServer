@inherits LayoutComponentBase
@namespace IMS_Interface

@using IMS_Library;
@using Microsoft.AspNetCore.Http;

@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor Context
@inject PopupProvider PopupManager
@inject ServerProvider ServerSelector

<style>
    button, select {
        outline: none !important;
    }

    .popup-background {
        float: left;
        position: fixed;
        width: 100%;
        height: 100%;
        top: 0px;
        left: 0px;
        right: 0px;
        bottom: 0px;
        z-index: 599;
        background-color: rgba(0,0,0,0.5);
        display: flex;
    }

    .world-card {
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        width: 200px;
        height: 250px;
        border-radius: 5px;
        display: inline-grid;
        margin: 5px;
        image-rendering: pixelated;
        background-color: white;
    }
</style>
@{
    PopupManager.OnPopupChange = StateHasChanged;
}
@if (PopupManager.CurrentPopupFragment != null)
{
    <div class="popup-background">
        <div class="world-card" style="
                margin: auto;
                width: unset;
                display:block;
                padding: 10px;
                position:relative;
                height:unset;
                overflow:auto;
            ">
            @PopupManager.CurrentPopupFragment
        </div>
    </div>
}

<NavMenu />
<div class="main">

    <div class="navbar navbar-inverse navbar-fixed-top" style="z-index:300">
        <div>
            <div class="navbar-header">
                <a class="navbar-brand" style="padding:15px 0px" href="/">Integrated Minecraft Server</a>
            </div>

            <div style="top:10px; right:8px; position:absolute;">
                @if (IMS.Instance.ServerManager.Servers.Count > 0)
                {
                    <select style="width:250px" class="btn btn-default dropdown-toggle" @bind="CurrentServerBoxText">
                        @foreach (ServerProxy proxy in IMS.Instance.ServerManager.Servers)
                        {
                            <option value="@proxy.ID">@proxy.CurrentConfiguration.ServerName</option>
                        }
                        <option value="NEW">Create new server...</option>
                    </select>
                }
                @if (Login.IsLoginRequired)
                {
                    <button style="background-color:transparent; margin-left:10px; border-style:none; color:white" @onclick="LogoutAsync">Sign Out</button>
                }
            </div>
        </div>
    </div>

    <div class="px-4" style="margin-left:80px; margin-top:74px; margin-right:10px">
        @Body
        <br />
    </div>
</div>
@code {
    [Inject]
    protected NavigationManager Navigator { get; set; }

    protected string CurrentServerBoxText
    {
        get
        {
            return ServerSelector.CurrentServerID.ToString();
        }
        set
        {
            if (value == "NEW")
            {
                Navigator.NavigateTo("/CreateNewServer", false);
            }
            else
            {
                ServerSelector.CurrentServerID = Guid.Parse(value);
            }
        }
    }

    protected override void OnInitialized()
    {
        if (Navigator.ToBaseRelativePath(Navigator.Uri) != "Login" && !Login.HasValidLoginCookie(JSRuntime, Context))
        {
            Navigator.NavigateTo("/Login", true);
        }
        NavigateToNewServerPage();
    }

    protected void NavigateToNewServerPage()
    {
        if (IMS.Instance.ServerManager.Servers.Count == 0 && Navigator.ToBaseRelativePath(Navigator.Uri) != "CreateNewServer")
        {
            Navigator.NavigateTo("/CreateNewServer", true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("pageLoad");
    }

    protected async Task LogoutAsync()
    {
        await Login.DeleteLoginCookie(JSRuntime);
        Navigator.NavigateTo("/Login", true);
    }
}
